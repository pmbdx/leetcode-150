double findMedianSortedArrays(int* nums1, int nums1Size, int* nums2, int nums2Size) 
{
    int i=0,j=0,k=0;
    int size = nums1Size+nums2Size+1;
    int merged[size+1];
    int current=-1000;
    int band=0;
    if(nums1Size!=0 && nums2Size!=0)
    {
        do
        {
                //printf("\n current %d %d %d",current,i,j);
            if(i!=nums1Size || j!=nums2Size)
            {
                if(*(nums1+i)<=*(nums2+j) && *(nums1+i)>=current)
                {
                        merged[k] = *(nums1+i);
                        i++;
                }
                else if (*(nums2+j)<=*(nums1+i) && *(nums2+j)>=current)
                {
                    merged[k] = *(nums2+j);
                        j++;
                }
                current=merged[k];
            }
            if(i==nums1Size || j==nums2Size)
            {
                band=1;
                k++;
            }
            else
                k++;
        
        }while(band!=1);
    }
       if(i>=nums1Size){
        while(j<nums2Size){
            merged[k]=*(nums2+j);
            j++;
            k++;
        }
       }
       if(j>=nums2Size)
       {
        while(i<nums1Size){
            merged[k]=*(nums1+i);
            i++;
            k++;
       }
       }
       if(k%2!=0)
       {
        return merged[k/2];
       }
       else if(k%2==0)
       {
            return ((double)merged[k/2] + (double)merged[(k/2)-1]) / 2.0; 
       }
    return 0;
}

